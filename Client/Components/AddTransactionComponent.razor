@using Programmin2_classroom.Shared.Models.present.toAdd
@inject HttpClient Http;

<h3>הוספה לתת קטגוריה: @subCategoryTitle </h3>
<div>

<button>פרטי ההזנה שלי</button>
<p>פרטי ההזנה</p>
<input type="text" @bind="newTransaction.transTitle"/>

<input type="date" @bind="newTransaction.transDate" />
@if (selectedDate.HasValue)
{
    <p>Selected Date: @selectedDate.Value.ToShortDateString()</p>
}
else
{
        <p>No date selected.</p>
}
<p>סכום ההזנה</p>
<input type="number" @bind="newTransaction.transValue" />
<p>ההזנה בתשלומים?</p>
<input type="checkbox" @bind="splitPayment" />
@if (splitPayment)
{
    <select @bind="selectedNumber">
        @for (int i = 1; i <= 12; i++)
        {
                <option value="@i">@i תשלומים</option>
              
        }
            selectedNumber = i;
    </select>

    <p>סכום כל תשלום בממוצע @(newTransaction.transValue / selectedNumber) ₪</p>
}
<p>אמצעי תשלום</p>
<select @bind="newTransaction.valueType">
    
    <option value="מזומן">מזומן</option>
    <option value="אשראי">אשראי</option>
    <option value="ביט/פייבוקס">ביט/פייבוקס</option>
    <option value="אחר">אחר</option>

</select>
@if (!string.IsNullOrEmpty(newTransaction.valueType))
{
    <p>שיטת תשלום נבחרת: @newTransaction.valueType</p>
}
<button>הגדרת ההוצאה כחוזרת</button> @*לעשות קומפוננטה של חלון הגדרת הוצאה כחוזרת*@
</div>
<div>
    <button>הגדרות מתקדמות</button>
@*    להוסיף את כל מה שהסקשן הזה מכיל*@
</div>
<button @onclick="saveAndRepeatTransactions">שמירה והזנה נוספת</button>
<button @onclick="saveAndEndTransactions">שמירה וסיום</button>

@code {
    [Parameter]
    public string subCategoryTitle { get; set; }

    [Parameter]
    public int subCategoryIDTOGet { get; set; }

    [Parameter]
    public EventCallback<bool> isTransactionOverlayOpen { get; set; } 

    TransactionToAdd newTransaction = new TransactionToAdd();

    private DateTime? selectedDate;

    bool splitPayment = false;

    private int selectedNumber = 1; // Default value

    public async Task saveAndEndTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = true;

        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("ההזנה נשמרה בהצלחה :)");
            isTransactionOverlayOpen.InvokeAsync(false);
        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }
                                              
     }

    public async Task saveAndRepeatTransactions()
    {
        newTransaction.subCategoryID = subCategoryIDTOGet;
        newTransaction.transType = true;

        var transToSaveRes = await Http.PostAsJsonAsync("api/Transactions/AddTransaction", newTransaction);
        if (transToSaveRes.IsSuccessStatusCode)
        {
            Console.WriteLine("ההזנה נשמרה בהצלחה :)");
            newTransaction = new TransactionToAdd();
        }
        else
        {
            Console.WriteLine("הזנה נכשלה");
        }
    }
                    
}   