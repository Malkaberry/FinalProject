@page "/"
@using Programmin2_classroom.Shared.Models.present.toShow
@using Programmin2_classroom.Shared.Models.present.toAdd
@using Programmin2_classroom.Shared.Models.present.toEdit
@*@using Programmin2_classroom.Shared.Models.past
@using Programmin2_classroom.Shared.Models.future*@
@*@using Programmin2_classroom.Client.Components*@

@inject HttpClient Http
@inject NavigationManager Nav
@inject DateService DateService

<h1>present home page</h1>

@if(user != null)
{
    <h1>היי @user.firstName 👋🏼</h1>

    <h2>מבט על חודש @currentMonth </h2>

    //שורת חיפוש

    <table class="table">
        <thead>
            <tr>
                <th>ניצלתי</th>
                <th>הכנסתי</th>   
                <th>הוצאתי</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@user.budgetFullValue% </td>               
                <td>@user.incomeValueFullList</td>
                <td>@user.spendingValueFullList</td>
                
            </tr>       
        </tbody>
    </table>


    <button>מצב החודש כרגע</button>

    <input type="checkbox" @bind="isChecked" />
    @*<label>הוצאות</label>*@

    @if (isChecked) // עובר להכנסות
    {
        <p>הכנסות</p>



    }
    else
    {
        <p>הוצאות</p>

        <button>הוספת קטגוריה חדשה</button>

        foreach (CategoryToShow category in user.categoriesFullList)
        {

            



        }


    }




}








@code{

    //[CascadingParameter]
    //public int UserId { get; set; }

    userToShow user;
    //List<CategoryToShow> categoriesList;

    private string currentMonth;
    private bool isChecked = false;
    string msg = "";
    int userID = 1;
    

    protected override async Task OnInitializedAsync()
    {
        // Simulating an asynchronous operation (e.g., fetching data)
        await Task.Delay(1); // This is just to simulate an async process.

        int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        currentMonth = GetHebrewMonthName(currentMonthNumber);
        StateHasChanged();

        var userRes = await Http.GetAsync("api/Present/userToShow/" + userID);

        if (userRes.IsSuccessStatusCode)
        {
            user = userRes.Content.ReadFromJsonAsync<userToShow> ().Result;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "User Not Found":
                    msg = "User not found ";
                    break;
            }
        }








    }
    
    private string GetHebrewMonthName(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1:
                return "ינואר";
            case 2:
                return "פברואר";
            case 3:
                return "מרץ";
            case 4:
                return "אפריל";
            case 5:
                return "מאי";
            case 6:
                return "יוני";
            case 7:
                return "יולי";
            case 8:
                return "אוגוסט";
            case 9:
                return "ספטמבר";
            case 10:
                return "אוקטובר";
            case 11:
                return "נובמבר";
            case 12:
                return "דצמבר";
            default:
                return "חודש לא תקין"; // Handle invalid month numbers
        }
    }












}